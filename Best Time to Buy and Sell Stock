Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.


My code:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int max = 0;
       
        for(int i = 1; i < prices.size(); i++)
        {
            if(prices[i] < prices[i-1])
                continue;
           for(int j = 0; j < i; j++)
           {
               if(prices[j] < prices[i])
               {
                  int temp = prices[i] - prices[j];
                   if(temp >= max)
                       max = temp;
               }
           }
        }
        return max;
    }
};
//然而，这个运行时间贼他妈久，效率很低，因为遍历了很多次，也遍历了很多无用的数据。我开始想的是，先求出数组最大的数字，再求出最小的数字，然后求差，但是
//这样就会出现大的数字在小的数字的前面。其实想想，首先要找到最小的数字，然后再求出差即可，我也不知道为什么别人可以想到那么好的代码，反正我就是没想到。

//别人的代码#1：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res = 0;
        if (prices.size() == 0) return 0;
        int min = INT_MAX;
        for (int price:prices){
            if (price - min > res) res = price - min;
            else if (price < min){
                min = price;
            }
        }
        return res;
    }
};

//这个说白了就是通过一次遍历求出min，因为是向后遍历的，所以不用担心最大的数字在最小的数字前面（然而我当时就是因为担心这个所以想了很久并且写了那么
//复杂的东西出来）。

//别人的代码#2：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int max=0;
        int temp=0;
        for(int i=1;i<prices.size();i++)
        {
            temp+=prices[i];
            temp-=prices[i-1];
            if(temp>max)max=temp;
            if(temp<0)temp=0;
        }
        return  max;
    }
};

//这段代码也太特么精妙了吧。。总体思想就是，比如a[3]和a[2]之间有一个差，存入到temp里面，如果之后的a[4]里面也会跟a[3]产生大于0的差值，那么可以直接继承
//第一个temp的值，相当于求了a[4]和a[2]的差！牛逼啊老哥。真的强
