Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.

MY code：
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int begin = 0, end = 0, max = 0;
        for(int i = 0; i< nums.size(); ++i)
        { for(int j = i+1; j < nums.size(); ++j)
            {
                if(nums[j] < nums[i])
                    begin = i+1;
                if(nums[j] > nums [i])
                    max = j+1;
                if(nums[j] <= nums[max-1])
                    end = j+1;
            }
         if(begin != 0)
            return end-begin;
        }
        return 0;
    }
};
基本思想就是通过两次循环去找到begin 和 end。但是在某些直接的例子，【2，1】就不行。 


class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> nums2 = nums;  
        sort(nums.begin(),nums.end());  
        int begin = -1;  
        int end = -2;  
        for(int i = 0;i < nums.size(); i++)  
        {  
            if(nums[i] != nums2[i])   
            {  
                if(begin == -1)  
                    begin = i;  
                end = i;  
            }  
        }  
        return end - begin + 1;  
    }  
    
};

这是人家的代码，基本的思想也很简单，就是复制一个容器然后把这个容器排序，然后对比就知道了。
