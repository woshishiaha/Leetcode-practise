Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1

Input: [3,0,1]
Output: 2
Example 2

Input: [9,6,4,2,3,5,7,0,1]
Output: 8

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

My code:
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        if(nums.size() == 1 && nums[0] == 0)
            return 1;
        if(nums.size() == 1 && nums[0] == 1)
            return 0;
        sort(nums.begin(), nums.end());
        for(int i = nums.size()-1; i > 0; i--)
        {
            if(nums[i]- nums[i-1] == 2)
                return nums[i]-1;
        }
        if(nums[0] == 0)
            return nums[nums.size()-1] +1;
        else 
            return 0;
        
    }
};

另外的解法：
1、把vec里面所有元素加起来，然后再算出从0到N的和，两数相减就可以了。（网上说这是最容易想到的办法。。然而我。。嘻嘻）

2、用异或去解决。将数组中数据和0到n异或，因为两个相同的数异或为0，所以剩下的数一定为那个未出现的数 
code:
class Solution {
public:
    int missingNumber(vector<int>& nums) { //利用xor异或运算 ,可避免int爆掉 
    int res = nums.size();
    for(int i=0; i<nums.size(); i++){
        res ^= i;
        res ^= nums[i];
    }
    return res;
    }
};

^=:是异或。参与运算的两个值，如果两个相应位相同，则结果为0，否则为1。即： 
0^0=0， 1^0=1， 0^1=1， 1^1=0
0^0=0,0^1=1 可以看出，0异或任何数＝任何数 
1^0=1,1^1=0 可以看出 1异或任何数=任何数取反 
任何数异或自己＝把自己置0
数a两次异或同一个数b（a=a^b^b）仍然为原值a.

举个例子，比如，我们得到一个数组[0,1,2,4,5],则res==5，在每一次for循环中，我们让5分别和i、nums[i]做异或运算，在5次循环后，res会和数列[0,1,2,3,4]
和数组[0,1,2,4,5]都异或一遍，因为一个数a两次异或同一个数b（a=a^b^b）仍然为原值a，所以，初始值5在多次异或运算后，得到的结果就是只与5异或一次的数字，
也就是缺的哪一个数字。
