Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. 
Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1. 
Note: Length of the array will not exceed 10,000.

题目其实很简单。。但是我还是没做出来。。。每次总是差一点，感觉总是想的太多，有时候不想太多其实就没那么多B事。。。

我的代码（最后一个用例出错了。）
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int length = 1, current = 1;
        if(!nums.size())
            return 0;
        for(int i = 1; i< nums.size(); ++i)
        {  
            if(nums[i]>nums[i-1])
            {
                ++current;
                length = current;
               
                
            }
            if(nums[i] < nums[i-1])
            {
                
                current = 1;
            }
        }
        return current;
    }
};

思想其实很简单，但是最后不知道为什么会有问题。

看到了别人的代码，虽然是一样的思想，但是人家的就对了。

class Solution {
public:
int findLengthOfLCIS(vector& nums) {

    if( nums.empty() )
        return 0;
    
    int curr_cnt = 1;
    int curr_so_far = 1;
    for( auto it = nums.begin(); it != nums.end() - 1; ++it )
    {
        if( ( *it < *(it + 1 ) ) )
             curr_cnt++;
        else
        {
            
            curr_so_far = max( curr_cnt , curr_so_far );
            curr_cnt = 1;
        }
    }        
    return max( curr_so_far, curr_cnt );
}
};

人家比我不同在哪里？其实就是在if, else那里。除了if其他一律用else。还有人家善用max()函数，就不用像我思考那样，老是想着，怎么样的时候要把current赋值
给length呢？
