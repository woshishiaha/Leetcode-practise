Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].


题意：求矩阵每个位置的相邻8个位置加上本身的值的平均值。

我的想法就是一个一个算。。。就是当行为0，分三种（列为0，列不为0，列为极限的情况）。然后继续算。。其实很麻烦，而且一些边界的重复有点难处理。看到了一个很
精妙的算法。

class Solution {
private:
int avg(int x, int y, vector<vector<int>>& M)
    {  
    int sum=0,count=0;
     for(int i=-1;i<=1;i++)
      { 
       for(int j=-1;j<=1;j++)
       { 
           if(x+i>=0 && y+j>=0 && x+i<M.size() && y+j<M[0].size())
           { sum+=M[x+i][y+j];
            count++;}
       }
      }
    return (sum/count);
    }//function ends here   
    
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
    vector<vector<int>> result(M.size(),vector<int>(M[0].size())); 
        for(int i=0;i<result.size();i++)
            {  
                for(int j=0;j<result[0].size();j++)
                 result[i][j]=avg(i,j,M);
            }
        return result;
  }
};

用i=-1, j=-1作为开始，这样就可以表示出-1的那一部分。真的精妙绝伦。。。
